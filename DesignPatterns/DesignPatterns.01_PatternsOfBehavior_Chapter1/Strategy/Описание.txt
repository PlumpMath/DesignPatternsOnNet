Стратегия

Назначение (что делает) - определяет семейство алгоритмов, инкапсулирует каждый из них и делает их взаимозаменяемыми.
Стратегия позволяет изменять алгоритмы независимо от клиентов, которые ими пользуются.
(Другими словами: стратегия инкапсулирует определенное поведение с возможностью его подмены.)

Если вам требуется определить семейство алгоритмов, инкапсулировать каждый из них, сделать их взаимозаменяемыми.

Примеры областей, где часто используется стратегия:
Сортировка, анализ данных, валидация, разбор данных, сериализация, кодирование/декодирование,получение конфигурации
— все эти концепции могут и должны быть выражены в виде стратегий или политик (policy).

Мотивация использования паттерна «Стратегия»: выделение поведения или алгоритма с возможностью его замены во время
исполнения.

Участники:
+ Strategy (ILogReader) — определяет интерфейс алгоритма;
+ Context (LogProcessor) — является клиентом стратегии;
+ ConcreteStrategyA, ConcreteStrategyB (LogFileReader, WindowsEventLogReader) — являются конкретными реализациями
  стратегии.


Варианты реализации в .NET
Вобщем случае паттерн «Стратегия» не определяет, какое количество операций
будет у «выделенного поведения или алгоритма». Это может быть одна операция
(метод Sort интерфейса ISortable) или семейство операций (Encode/Decode
интерфейса IMessageProcessor).

При этом если операция лишь одна, то вместо выделения и передачи интерфейса
в современных .NET-приложениях очень часто используются делегаты. Так, в на-
шем случае вместо передачи интерфейса ILogReader класс LogProcessor мог
бы принимать делегат вида Func<List<LogEntry>>, который соответствует
сигнатуре единственного метода стратегии.

По определению применение стратегии обусловлено двумя причинами:
- необходимостью инкапсуляции поведения или алгоритма;
- необходимостью замены поведения или алгоритма во время исполнения.

Любой нормально спроектированный класс уже инкапсулирует в себе поведение
или алгоритм, но не любой класс с некоторым поведением является или должен
быть стратегией. Стратегия нужна тогда, когда не просто требуется спрятать алго-
ритм, а важно иметь возможность заменить его во время исполнения!
Другими словами, стратегия обеспечивает точку расширения системы в опреде-
ленной плоскости: класс-контекст принимает экземпляр стратегии и не знает, какой
вариант стратегии он собирается использовать.